@page "/"
@using Controller
@using Model
@inject ControllerManager Manager
@inject NewsApiController NewsApi
@inject ArticlesService ArticleService
@inject MsTranslatorApiController Translator

<PageTitle>Index</PageTitle>

<div class="category-container">
    <button class=@(_selectedCategoryView[Category.TopStories] ? "category-button-selected" : "category-button") 
                 @onclick="() => { ChangeSelectedCategoryView(Category.TopStories); LoadPageContent(Category.TopStories); }">
        Top Stories
    </button>
    <button class=@(_selectedCategoryView[Category.Sports] ? "category-button-selected" : "category-button") 
                 @onclick="() => { ChangeSelectedCategoryView(Category.Sports); LoadPageContent(Category.Sports); }">
        Sports
    </button>

    @* Currently no data for this category, can be implemented later *@
    <button class=@(_selectedCategoryView[Category.Politics] ? "category-button-selected" : "category-button") 
                @onclick="() => { ChangeSelectedCategoryView(Category.Politics); LoadPageContent(Category.Politics); }">
        Politics
    </button>

    <button class=@(_selectedCategoryView[Category.Science] ? "category-button-selected" : "category-button") 
                @onclick="() => { ChangeSelectedCategoryView(Category.Science); LoadPageContent(Category.Science); }">
        Science
    </button>
    <button class=@(_selectedCategoryView[Category.Business] ? "category-button-selected" : "category-button") 
                @onclick="() => { ChangeSelectedCategoryView(Category.Business); LoadPageContent(Category.Business); }">
        Business
    </button>
    <button class=@(_selectedCategoryView[Category.Entertainment] ? "category-button-selected" : "category-button") 
                @onclick="() => { ChangeSelectedCategoryView(Category.Entertainment); LoadPageContent(Category.Entertainment); }">
        Entertainment
    </button>
</div>

@if (_isContentLoaded)
{
    <div class="tiles-container">
        @foreach (var article in CurrentArticles)
        {
            <div class="tile">
                <div>
                    <img src="https://www.tagesspiegel.de/gesellschaft/medien-_-ki/images/google-logo/alternates/BASE_1_1_W1000/google-logo.jpeg" alt="Placeholder"/>
                </div>
                @if (article.Title.Length > 70)
                {
                    <h2>@article.Title.Substring(0, Math.Min(article.Title.Length, 70))...</h2>
                }
                else
                {
                    <h2>@article.Title</h2>
                }
            </div>
        }
    </div>
}
else
{
}

@code {
    private bool _isContentLoaded;

    private Dictionary<Category, bool> _selectedCategoryView = new Dictionary<Category, bool>()
    {
        { Category.TopStories, false },
        { Category.Sports, false },
        { Category.Politics, false },
        { Category.Science, false },
        { Category.Business, false },
        { Category.Entertainment, false }
    };

    private List<NewsArticle> CurrentArticles { get; set; } = new();

    /*****************************************************************************************************************/

    private void ChangeSelectedCategoryView(Category category)
    {
        foreach (var entry in _selectedCategoryView)
        {
            DeactivateCategoryView(entry.Key);
        }

        _selectedCategoryView[category] = true;
    }

    private void DeactivateCategoryView(Category category)
    {
        _selectedCategoryView[category] = false;
    }

    //TODO: Load TopStories on Start with Loading animation

    private async void LoadPageContent(Category category)
    {
        if (ArticleService.GetArticleList(category)!.Count > 0)
        {
            CurrentArticles = ArticleService.GetArticleList(category)!;
            StateHasChanged();
        }
        else
        {
            if (await Manager.LoadContent(NewsApi, category, Translator))
            {
                _isContentLoaded = true;
                CurrentArticles = ArticleService.GetArticleList(category)!;
                StateHasChanged();
            }
        }
    }

    private async void Test()
    {
        //var result = await Manager.testfunc();
        //TestString = result;

        if (await Manager.LoadContent(NewsApi, Category.TopStories, Translator))
        {
            _isContentLoaded = true;
            Console.WriteLine(_isContentLoaded);
            Console.WriteLine(CurrentArticles);
        }

        StateHasChanged();
    }

}