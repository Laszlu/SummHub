@page "/"
@using Controller
@using Model
@inject ControllerManager Manager
@inject NewsApiController NewsApi
@inject ArticlesService ArticleService
@inject MsTranslatorApiController Translator
@inject SearchService SearchService

<PageTitle>Index</PageTitle>



<div>
    <div style="height: 50px">
        <div class="category-container">
            @if (!_allContentIsLoaded)
            {
                @for (int i = 0; i < 5; i++)
                {
                    <div class="category-button-skeleton">
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="100%" Width="100%" />
                    </div>
                }
            }
            else
            {
                <button class=@(_selectedCategoryView[Category.TopStories] ? "category-button-selected" : "category-button")
                        @onclick="() => { Manager.CurrentCategory = Category.TopStories; 
                        ChangeSelectedCategoryView(Manager.CurrentCategory); ShowPageContent(Manager.CurrentCategory); }">
                    Top Stories
                </button>
                <button class=@(_selectedCategoryView[Category.Sports] ? "category-button-selected" : "category-button")
                        @onclick="() => { Manager.CurrentCategory = Category.Sports; 
                        ChangeSelectedCategoryView(Manager.CurrentCategory); ShowPageContent(Manager.CurrentCategory); }">
                    Sports
                </button>

                @* Currently no data for this category, can be implemented later *@
                @*<button class=@(_selectedCategoryView[Category.Politics] ? "category-button-selected" : "category-button")
                        @onclick="() => { Manager.CurrentCategory = Category.Politics;
                        ChangeSelectedCategoryView(Manager.CurrentCategory); LoadPageContent(Manager.CurrentCategory); }">
                    Politics
                </button>*@

                <button class=@(_selectedCategoryView[Category.Science] ? "category-button-selected" : "category-button")
                        @onclick="() => { Manager.CurrentCategory = Category.Science; 
                        ChangeSelectedCategoryView(Manager.CurrentCategory); ShowPageContent(Manager.CurrentCategory); }">
                    Science
                </button>
                <button class=@(_selectedCategoryView[Category.Business] ? "category-button-selected" : "category-button")
                        @onclick="() => { Manager.CurrentCategory = Category.Business; 
                        ChangeSelectedCategoryView(Manager.CurrentCategory); ShowPageContent(Manager.CurrentCategory); }">
                    Business
                </button>
                <button class=@(_selectedCategoryView[Category.Entertainment] ? "category-button-selected" : "category-button")
                        @onclick="() => { Manager.CurrentCategory = Category.Entertainment; 
                        ChangeSelectedCategoryView(Manager.CurrentCategory); ShowPageContent(Manager.CurrentCategory); }">
                    Entertainment
                </button>
            }
        </div>
    </div>
    
    <div class="search-bar">
        <EditForm Model="@SearchInput" OnValidSubmit="() => { FilteredArticles = SearchService.FilterArticles(CurrentArticles, SearchInput.Query); }" class="search-bar-form">
            <DataAnnotationsValidator/>
            <InputText class="search-bar-input" @bind-Value="@SearchInput.Query" placeholder="Search..."></InputText>
            <ValidationMessage For="() => SearchInput.Query"></ValidationMessage>
        </EditForm>
    </div>

    <div>
        @if (_allContentIsLoaded)
        {
            <div class="tiles-container" style=@(_readerIsOpen ? "visibility: hidden" : "visibility: visible")>
                @foreach (var article in FilteredArticles)
                {
                    <div class="tile" @onclick="() => { SelectedArticle = article; _readerIsOpen = true; }">

                        <div>
                            @if (article.ImageUrl != null)
                            {
                                <img class="article-img" src="@article.ImageUrl" alt="article image"/>
                            }
                            else
                            {
                                <img class="tile-img" src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Google_News_icon.svg/293px-Google_News_icon.svg.png" alt="Placeholder"/>
                            }
                        </div>
                        @if (article.Title.Length > 70)
                        {
                            <h2>@article.Title.Substring(0, Math.Min(article.Title.Length, 70))...</h2>
                        }
                        else
                        {
                            <h2>@article.Title</h2>
                        }
                    </div>
                }
            </div>
        }
        else
        {
            <div class="tiles-container">
                @for (int i = 0; i < 20; i++)
                {
                    <div class="tile">
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="100%"/>
                    </div>
                }
            </div>
        }

        @if (_readerIsOpen)
        {
            <MudOverlay Visible="true" DarkBackground="true">
                <Reader Article="SelectedArticle" CloseReader="@(() => { _readerIsOpen = false; StateHasChanged(); })"/>
            </MudOverlay>
        }
    </div>
</div>


@code {
    //private bool _categoryIsLoaded;
    private bool _allContentIsLoaded;
    private bool _readerIsOpen;

    //disabled="@(_allContentIsLoaded ? "false" : "true")"

    private Dictionary<Category, bool> _selectedCategoryView = new Dictionary<Category, bool>()
    {
        { Category.TopStories, false },
        { Category.Sports, false },
        { Category.Politics, false },
        { Category.Science, false },
        { Category.Business, false },
        { Category.Entertainment, false }
    };

    private NewsArticle SelectedArticle { get; set; }

    private List<NewsArticle> CurrentArticles { get; set; } = new();
    private List<NewsArticle> FilteredArticles { get; set; } = new();

    private SearchInputModel SearchInput { get; set; } = new();

    /*****************************************************************************************************************/

    protected override void OnInitialized()
    {
        Console.WriteLine($"Initialized Index page with Language {Manager.CurrentLanguage}");
        StartLoadingContent();
        base.OnInitialized();
    }

    private void ChangeSelectedCategoryView(Category category)
    {
        foreach (var entry in _selectedCategoryView)
        {
            DeactivateCategoryView(entry.Key);
        }

        _selectedCategoryView[category] = true;
    }

    private void DeactivateCategoryView(Category category)
    {
        _selectedCategoryView[category] = false;
    }
    
    private async void StartLoadingContent()
    {
        ChangeSelectedCategoryView(Manager.CurrentCategory);
        
        if (ArticleService.GetArticleList(Manager.CurrentCategory).Count <= 0 || Manager.CurrentLanguage != Manager.PreviousLanguage)
        {
            Console.WriteLine("Loading from API");
            await LoadPageContent(Category.TopStories, Manager.CurrentLanguage);
            await LoadPageContent(Category.Sports, Manager.CurrentLanguage);
            await LoadPageContent(Category.Science, Manager.CurrentLanguage);
            await LoadPageContent(Category.Business, Manager.CurrentLanguage);
            await LoadPageContent(Category.Entertainment, Manager.CurrentLanguage);
            ShowPageContent(Manager.CurrentCategory);
        }
        else
        {
            Console.WriteLine("Already loaded and showing");
            ShowPageContent(Manager.CurrentCategory);
        }
        
        _allContentIsLoaded = true;
        StateHasChanged();
    }

    private async Task LoadPageContent(Category category, string language)
    {
        if (await Manager.LoadContent(NewsApi, category, Translator, language))
        {
            StateHasChanged();
        }
    }

    private void ShowPageContent(Category category)
    {
        Console.WriteLine($"now showing {category}");
        CurrentArticles = ArticleService.GetArticleList(category)!;
        FilteredArticles = CurrentArticles;
        StateHasChanged();
    }

    private async void Test()
    {
        //var result = await Manager.testfunc();
        //TestString = result;

        if (await Manager.LoadContent(NewsApi, Category.TopStories, Translator, Manager.CurrentLanguage))
        {
            Console.WriteLine(CurrentArticles);
        }

        StateHasChanged();
    }

}