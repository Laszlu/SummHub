@page "/"
@using Controller
@using Model
@inject ControllerManager Manager
@inject NewsApiController NewsApi
@inject ArticlesService ArticleService
@inject MsTranslatorApiController Translator

<PageTitle>Index</PageTitle>

<div>
    <div style="height: 50px">
        <div class="category-container">
            <button class=@(_selectedCategoryView[Category.TopStories] ? "category-button-selected" : "category-button") style="@(_allContentIsLoaded ? "visibility: visible" : "visibility: hidden")"
                    @onclick="() => { _categoryIsLoaded = false; ChangeSelectedCategoryView(Category.TopStories); ShowPageContent(Category.TopStories); }">
                Top Stories
            </button>
            <button class=@(_selectedCategoryView[Category.Sports] ? "category-button-selected" : "category-button") style="@(_allContentIsLoaded ? "visibility: visible" : "visibility: hidden")"
                    @onclick="() => { _categoryIsLoaded = false; ChangeSelectedCategoryView(Category.Sports); ShowPageContent(Category.Sports); }">
                Sports
            </button>

            @* Currently no data for this category, can be implemented later *@
            @*<button class=@(_selectedCategoryView[Category.Politics] ? "category-button-selected" : "category-button") style="@(_allContentIsLoaded ? "visibility: visible" : "visibility: hidden")"
                      @onclick="() => { _categoryIsLoaded = false; ChangeSelectedCategoryView(Category.Politics); LoadPageContent(Category.Politics); }">
                Politics
            </button>*@

            <button class=@(_selectedCategoryView[Category.Science] ? "category-button-selected" : "category-button") style="@(_allContentIsLoaded ? "visibility: visible" : "visibility: hidden")"
                    @onclick="() => { _categoryIsLoaded = false; ChangeSelectedCategoryView(Category.Science); ShowPageContent(Category.Science); }">
                Science
            </button>
            <button class=@(_selectedCategoryView[Category.Business] ? "category-button-selected" : "category-button") style="@(_allContentIsLoaded ? "visibility: visible" : "visibility: hidden")"
                    @onclick="() => { _categoryIsLoaded = false; ChangeSelectedCategoryView(Category.Business); ShowPageContent(Category.Business); }">
                Business
            </button>
            <button class=@(_selectedCategoryView[Category.Entertainment] ? "category-button-selected" : "category-button") style="@(_allContentIsLoaded ? "visibility: visible" : "visibility: hidden")"
                    @onclick="() => { _categoryIsLoaded = false; ChangeSelectedCategoryView(Category.Entertainment); ShowPageContent(Category.Entertainment); }">
                Entertainment
            </button>
        </div>
    </div>

    <div>
        @if (_categoryIsLoaded)
        {
            <div class="tiles-container" style=@(_readerIsOpen ? "visibility: hidden" : "visibility: visible")>
                @foreach (var article in CurrentArticles)
                {
                    <div class="tile" @onclick="() => { SelectedArticle = article; _readerIsOpen = true; }">
                        
                        <div>
                            @if (article.ImageUrl != null)
                            {
                                <img class="article-img" src="@article.ImageUrl" alt="article image"/>
                            }
                            else
                            {
                                <img class="tile-img" src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Google_News_icon.svg/293px-Google_News_icon.svg.png" alt="Placeholder"/>
                            }
                        </div>
                        @if (article.Title.Length > 70)
                        {
                            <h2>@article.Title.Substring(0, Math.Min(article.Title.Length, 70))...</h2>
                        }
                        else
                        {
                            <h2>@article.Title</h2>
                        }
                    </div>
                }
            </div>
        }
        else
        {
            <div class="tiles-container">
                @for (int i = 0; i < 20; i++)
                {
                    <div class="tile">
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="100%"/>
                    </div>
                }
            </div>
        }

        @if (_readerIsOpen)
        {
            <MudOverlay Visible="true" DarkBackground="true">
                <Reader Article="SelectedArticle" CloseReader="@(() => { _readerIsOpen = false; StateHasChanged(); })"/>
            </MudOverlay>
        }
    </div>
</div>


@code {
    private bool _categoryIsLoaded;
    private bool _allContentIsLoaded;
    private bool _readerIsOpen;

    //disabled="@(_allContentIsLoaded ? "false" : "true")"
    
    private Dictionary<Category, bool> _selectedCategoryView = new Dictionary<Category, bool>()
    {
        { Category.TopStories, false },
        { Category.Sports, false },
        { Category.Politics, false },
        { Category.Science, false },
        { Category.Business, false },
        { Category.Entertainment, false }
    };

    private NewsArticle SelectedArticle { get; set; }

    private List<NewsArticle> CurrentArticles { get; set; } = new();

    /*****************************************************************************************************************/


    protected override void OnInitialized()
    {
        StartLoadingContent();
        base.OnInitialized();
    }

    private void ChangeSelectedCategoryView(Category category)
    {
        foreach (var entry in _selectedCategoryView)
        {
            DeactivateCategoryView(entry.Key);
        }

        _selectedCategoryView[category] = true;
    }

    private void DeactivateCategoryView(Category category)
    {
        _selectedCategoryView[category] = false;
    }

    private async Task LoadPageContent(Category category)
    {
        if (ArticleService.GetArticleList(category)!.Count > 0)
        {
            CurrentArticles = ArticleService.GetArticleList(category)!;
            _categoryIsLoaded = true;
            StateHasChanged();
        }
        else
        {
            if (await Manager.LoadContent(NewsApi, category, Translator))
            {
                _categoryIsLoaded = true;
                StateHasChanged();
            }
        }
    }

    private void ShowPageContent(Category category)
    {
        _categoryIsLoaded = true;
        Console.WriteLine($"now showing {category}");
        CurrentArticles = ArticleService.GetArticleList(category)!;
        StateHasChanged();
    }

    private async void StartLoadingContent()
    {
        ChangeSelectedCategoryView(Category.TopStories);
        await LoadPageContent(Category.TopStories);
        ShowPageContent(Category.TopStories);
        await LoadPageContent(Category.Sports);
        await LoadPageContent(Category.Science);
        await LoadPageContent(Category.Business);
        await LoadPageContent(Category.Entertainment);
        _allContentIsLoaded = true;
        StateHasChanged();
    }

    private async void Test()
    {
        //var result = await Manager.testfunc();
        //TestString = result;

        if (await Manager.LoadContent(NewsApi, Category.TopStories, Translator))
        {
            _categoryIsLoaded = true;
            Console.WriteLine(_categoryIsLoaded);
            Console.WriteLine(CurrentArticles);
        }

        StateHasChanged();
    }

}